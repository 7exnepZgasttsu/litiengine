tasks.named("printGitSemVer") {
  group = "versioning"
  description = "Prints the Gradle project version resolved from git tags."
}


tasks.register("incrementMajorVersion") {
  group = "versioning"
  doLast {
    String newTag
    if (grgit.tag.list().isEmpty()) {
      newTag = "0.0.1"
    } else {
      def versions = getVersions(getLatestTag())
      // Increment major version
      versions[0] += 1
      // Increment minor version
      versions[1] = 0
      // Increment patch version
      versions[2] = 0
      newTag = versions.join(".")
    }
    grgit.tag.add {
      name = newTag
      message = "Release of $newTag"
    }
    println("Tagged version $newTag")
    grgit.push { tags = true }
  }
}

tasks.register("incrementMinorVersion") {
  group = "versioning"
  doLast {
    String newTag
    if (grgit.tag.list().isEmpty()) {
      newTag = "0.0.1"
    } else {
      def versions = getVersions(getLatestTag())
      // Increment minor version
      versions[1] += 1
      // Increment patch version
      versions[2] = 0
      newTag = versions.join(".")
    }
    grgit.tag.add {
      name = newTag
      message = "Release of $newTag"
    }
    println("Tagged version $newTag")
    grgit.push { tags = true }
  }
}

tasks.register("incrementPatchVersion") {
  group = "versioning"
  doLast {
    String newTag
    if (grgit.tag.list().isEmpty()) {
      newTag = "0.0.1"
    } else {
      def versions = getVersions(getLatestTag())
      // Increment patch version
      versions[2] += 1
      newTag = versions.join(".")
    }
    grgit.tag.add {
      name = newTag
      message = "Release of $newTag"
    }
    println("Tagged version $newTag")
    grgit.push { tags = true }
  }
}

def getSortedGitTags() {
  return grgit.tag.list().sort { x, y ->
    def xVersions = getVersions(x.name)
    def yVersions = getVersions(y.name)
    xVersions[0] <=> yVersions[0] ?:
      xVersions[1] <=> yVersions[1] ?:
        xVersions[2] <=> yVersions[2]
  }
}

def getVersions(var tag) {
  return tag.tokenize('.')*.asType(Integer)
}

def getLatestTag() {
  return getSortedGitTags().last().name
}

gitSemVer {
  developmentIdentifier = "dev"
  noTagIdentifier = "noTag"
  enforceSemanticVersioning = true
  //  ensure that other tasks can already access the computed SemVer during evaluation
  assignGitSemanticVersion()
}
