apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceSets {
  main.java.srcDir "src"
  main.resources.srcDir "resources"
  
  test.java.srcDir "tests"
  test.resources.srcDir "tests"
}

repositories {
   mavenCentral()
}

dependencies {
  implementation 'net.java.jinput:jinput:2.0.9'
  implementation 'net.java.jinput:jinput:2.0.9:natives-all'
  implementation 'com.googlecode.soundlibs:jorbis:0.0.17.4'
  implementation 'com.googlecode.soundlibs:tritonus-share:0.3.7.4'
  implementation 'com.googlecode.soundlibs:vorbisspi:1.0.3.3'
  implementation ('com.googlecode.soundlibs:mp3spi:1.9.5.4'){
    exclude group:'junit'
  }

  implementation 'com.code-disaster.steamworks4j:steamworks4j:1.8.0'
  
  // JAXB modules for JDK 9 or higher
  implementation 'javax.activation:javax.activation-api:1.2.0'
  implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
  implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
  implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'
  
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.1'
  testImplementation 'org.mockito:mockito-core:2.25.1'
}

test {
  useJUnitPlatform()
}

jar {
  from {
    configurations.compileClasspath.collect { zipTree it } 
  } 
  
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  
  exclude 'META-INF/services/**'
  exclude 'module-info.*'
  exclude '**/*.dll'
  exclude '**/*.jnilib'
  exclude '**/*.dylib'
  exclude '**/*.so'
  exclude 'junit**/**'
}

javadoc {
  options.encoding = 'UTF-8'
}

signing {
  sign configurations.archives
}

task copyNativeLibs(type: Copy) {
  from(new File('lib')) { exclude '**/*.jar' }
  into new File(buildDir, 'libs')
  
  from(new File('.')) { include 'LICENSE' }
  into new File(buildDir, 'libs')
}

task createJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
  options.encoding = 'UTF-8'
  dependsOn build
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
  archiveVersion = 'v0.4.19-alpha'
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
  archiveVersion = 'v0.4.19-alpha'
}

artifacts {
  archives javadocJar, sourcesJar
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  dependsOn copyNativeLibs
}

group = "de.gurkenlabs"
archivesBaseName = "litiengine"
version = "0.4.19"

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'litiengine'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'LITIengine is the pure 2D free java game engine. Written in plain Java 8 it provides all the infrastructure to create a 2D tile based java game, be it a platformer or a top-down adventure.'
        url 'http://litiengine.com'

        scm {
          connection 'scm:git:git://github.com/gurkenlabs/litiengine.git'
          developerConnection 'scm:git:git@github.com:gurkenlabs/litiengine.git'
          url 'https://github.com/gurkenlabs/litiengine/'
        }

        licenses {
          license {
            name 'MIT License'
            url 'https://github.com/gurkenlabs/litiengine/blob/master/LICENSE'
          }
        }

        developers {
          developer {
            id 'steffen'
            name 'Steffen Wilke'
            email 'steffen@gurkenlabs.de'
          }
          developer {
            id 'matthias'
            name 'Matthias Wilke'
            email 'matthias@gurkenlabs.de'
          }
        }
      }
    }
  }
}
